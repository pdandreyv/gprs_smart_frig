<?php

namespace gprs\AdminBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * UnitProtesterRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IceboxRepository extends EntityRepository
{
    public $fields = array(
        array('i','id','id','f'),
        array('i','iccid','iccid','f'),
        array('i','imei','imei','f'),
        array('i','id','id','f'),
        array('i','serial_number','serial_number','f'), 
        array('i','code_tt','code_tt','f'),
        array('i','model','model','f'),
        array('i','type','type','f'),
        array('i','contragent','contragent','f'),
        array('i','monitor','monitor','f'),
        array('i','status','status','f'),
        array('o','title','title','m'),
        array('o','city','city','m'),
        array('o','address','address','m'),
        array('o','lat','lat','m'), 
        array('o','lng','lng','m'), 
        array('d','dooropen','dooropen','m'), 
        array('d','t_out','t_out','m'), 
        array('d','t_inside','t_inside','m'), 
        array('i','status','power','m'), 
        array('d','weight','weight','m'), 
        array('d','location','location','m'),
        array('d','oos','oos','m'),
        array('d','sms','sms','m'),
        array('d','u_oos','u_oos','m'),
        array('t','fio','tr_fio','m'),
        array('t','phone','tr_phone','m'),
        array('t','email','tr_email','m'),
        array('i','trader_id','trader_id','m'),
    );
    
    
    public function getSQLResult($where='',$d_sql='SELECT *, 1 oos, 1 sms, 1 u_oos FROM data d ORDER BY d.id DESC')
    {
        $rsm = new \Doctrine\ORM\Query\ResultSetMapping();
        $rsm->addEntityResult('gprs\AdminBundle\Entity\Icebox', 'i');
        foreach($this->fields as $f) {
            if($f[3]=='f')
                $rsm->addFieldResult('i', $f[2], $f[2]);
            else
                $rsm->addMetaResult('i', $f[2], $f[2]);
        }
        
        $sql = 'SELECT ';
        foreach($this->fields as $f) {
            $sql .= $f[0].'.'.$f[1].' '.$f[2].',';
        }
        $sql = substr($sql,0, -1);
        $sql .= ' FROM icebox i 
                     LEFT JOIN outlet o ON (i.outlet_id = o.id) 
                     LEFT JOIN trader t ON (i.trader_id = t.id)
                     LEFT JOIN ('.$d_sql.') d ON ( i.id = d.icebox_id ) '.   //  LEFT JOIN (SELECT d1.id, d1.dooropen,d1.t_out,d1.t_inside,d1.t_out,d1.weight,d1.location FROM gprsAdminBundle:Data d1 WHERE d1.icebox_id = i.id ORDER BY d1.id DESC LIMIT 1) d WITH d.icebox_id = i.id
                     $where.' 
                     GROUP BY i.id 
                    ';

        $q = $this->getEntityManager()->createNativeQuery($sql, $rsm);

        $result = $q->getArrayResult();

        foreach($result as $k=>$r){
            foreach($this->fields as $f) {
                if(!isset($r[$f['2']])) $result[$k][$f['2']] = null;
            }
        }

        return $result;
    }
    
    public function getReport($post)
    {
        if(isset($post['from'])){
            $from = $post['from'];
            $to = $post['to'];
            unset($post['from']);
            unset($post['to']);
        }
        
        $ids = substr($post['ids'],1);
        $now_time = $post['now_time'];
        unset($post['ids']);
        unset($post['now_time']);
        $res['fields'] = array_keys($post);
        $where = 'WHERE i.id in ('.$ids.') ';
        
        if($now_time == 'week') {
            /*$d_sql = 'SELECT *,count(icebox_id) oos, 0 sms, 1 u_oos  
                FROM data d 
                WHERE d.weight < 80 
                    AND created_at > NOW() - INTERVAL 1 WEEK 
                    AND d.weight >= 0 
                GROUP BY d.icebox_id ORDER BY d.id DESC';*/
            
            $d_sql = 'SELECT *,count(icebox_id) oos, count(icebox_id) sms, min(d.status) u_oos, 1 t_inside, 1 t_out 
                FROM alarm d
                WHERE d.weight = 1 
                    AND created_at > NOW() - INTERVAL 1 WEEK 
                GROUP BY d.icebox_id ORDER BY d.id DESC';
            
            $result = $this->getSQLResult($where,$d_sql);
        }
        elseif($now_time == 'period'){
            /*$d_sql = 'SELECT *,count(icebox_id) oos, 0 sms, 1 u_oos  
                FROM data d 
                WHERE d.weight < 80 
                    AND created_at > "'.$from.'" AND created_at < "'.$to.'"
                    AND d.weight >= 0 
                GROUP BY d.icebox_id ORDER BY d.id DESC';*/
            $d_sql = 'SELECT *,count(icebox_id) oos, count(icebox_id) sms, min(d.status) u_oos, 1 t_inside, 1 t_out 
                FROM alarm d
                WHERE d.weight = 1 
                    AND created_at >= "'.$from.'" AND created_at <= "'.$to.'"
                GROUP BY d.icebox_id ORDER BY d.id DESC';
            
            $result = $this->getSQLResult($where,$d_sql);
        }
        else {
            $result = $this->getSQLResult($where);
        }
        
//echo "<pre>"; var_dump($result); exit;
        $res['data'] = $this->transform($result);
        
        return $res;
    }
    
    public function getAll()
    {
        $result = $this->getSQLResult();
        
        return $this->transform($result);
    }
    
    public function getAlarms()
    {
        $result = $this->getSQLResult('WHERE i.status not in (1,2)');

        return $this->transform($result);
    }
    
    public function transform($result)
    {
        $data = array();
        $i=0;
        foreach ($result as $res){
            foreach ($res as $key => $val){
                if ($key===0){
                    $data[$i] = $val;
                }
                else {
                    $data[$i][$key] = $val;
                }
            }
            $i++;
        }

        return $data;
    }

    public function getOne($id)
    {
        $result = $this->getSQLResult('WHERE i.id = '.$id);
        $result = $this->transform($result);

        return $result[0];
    }
    public function getCountAlarm($filter)
    {
        if($filter){
            $res = $this->filter($filter,1);
            $res = count($res);
        }
        else {
            $res = $this->getEntityManager()->createQuery('SELECT COUNT(i.id) counter FROM gprsAdminBundle:Icebox i WHERE i.status not in(1,2)')->getArrayResult();
            if($res) $res = $res[0]['counter'];
            else $res = 0;
        }
        return $res;
    }
    public function getCountStandart($filter)
    {
        if($filter){
            $res = $this->filter($filter);
            $res = count($res);
        }
        else {
            $res = $this->getEntityManager()->createQuery('SELECT COUNT(i.id) counter FROM gprsAdminBundle:Icebox i')->getArrayResult();
            if($res) $res = $res[0]['counter'];
            else $res = 0;
        }
        return $res;
    }
    public function filter($data = array(),$alarm=false)
    {
        $res = array();
        if(!empty($data)){
            $where = array();
            $params = array();
            foreach($data as $k=>$v){
                if($k =='trader') $k = 'trader_id';
                if(is_object($v)){
                    $where[] = "i.".$k." = '".$v."'";
                }
                elseif($v){
                    $where[] = "i.".$k." LIKE '%".$v."%'";
                }
            }

            if($alarm){
                $where[] = 'i.status not in(1,2)';
            }
            if(count($where))
                $result = $this->getSQLResult('WHERE '.implode(' AND ', $where));
            else
                $result = $this->getSQLResult();

            return $this->transform($result);
        }
        return $res;
    }
    public function getArrayCountry()
    {
        $result = $this->getEntityManager()
            ->createQuery('SELECT i.id, i.country
                     FROM gprsAdminBundle:Icebox i 
                     GROUP BY i.country
                     ORDER BY i.country
            ')
            ->getResult();
        $res=array(''=>'');
        if($result){
            foreach($result as $data){
                $res[$data['country']] = $data['country'];
            }
        }
        return $res;
    }
    public function getArrayRegion($country='')
    {
        $result = $this->getEntityManager()
            ->createQuery('SELECT i.id, i.region
                     FROM gprsAdminBundle:Icebox i '.
                     (($country)?'WHERE i.country = :country':'') .'
                     GROUP BY i.region
                     ORDER BY i.region
            ');

        if($country) $result->setParameter('country', $country);
        $result = $result->getArrayResult();
  
        $res=array(''=>'');
        if($result){
            foreach($result as $data){
                $res[$data['region']] = $data['region'];
            }
        }
        return $res;
    }
    public function getArrayCity($region='')
    {
        $result = $this->getEntityManager()
            ->createQuery('SELECT i.id, i.city
                     FROM gprsAdminBundle:Icebox i '.
                     (($region)?'WHERE i.region = :region':'') .'
                     GROUP BY i.city
                     ORDER BY i.city
            ');
        if($region) $result->setParameter('region', $region);
        $result = $result->getArrayResult();
        
        $res=array(''=>'');
        if($result){
            foreach($result as $data){
                $res[$data['city']] = $data['city'];
            }
        }
        return $res;
    }
    public function getArrayField($field)
    {
        $result = $this->getEntityManager()
            ->createQuery('SELECT i.id, i.'.$field.'
                     FROM gprsAdminBundle:Icebox i 
                     GROUP BY i.'.$field.'
                     ORDER BY i.'.$field);
        $result = $result->getArrayResult();
        
        $res=array(''=>'');
        if($result){
            foreach($result as $data){
                $res[$data[$field]] = $data[$field];
            }
        }
        return $res;
    }

}
